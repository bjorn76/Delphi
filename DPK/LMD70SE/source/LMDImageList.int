
uses
  Windows,
  SysUtils,
  Classes,
  graphics,
  LMDBase,
  LMDGraph,
  LMDCustomImageList,
  LMDCustomContainer;

type

  TLMDDrawingStyle=(dsFocus, dsSelected, dsNormal, dsTransparent);
  TLMDImageType=(itImage, itMask);

  {****************************************************************************}
  {----------------------TLMDImageListItem-------------------------------------}
  TLMDImageListItem = class(TLMDListItem)
  private
    FAllocBy,
    FHeight,
    FUsed,
    FWidth:Integer;

    FPixelFormat:TLMDSavePixelFormat;

    FBKColor,
    FBlendColor:TColor;
    FDrawingStyle:TLMDDrawingStyle;

    FImage,
    FMask:TBitmap;
    FInfo:TList;

    FImageType:TLMDImageType;

    FMasked,
    FShareImages:Boolean;

    function GetCount:Integer;
    procedure SetInteger(Index:Integer; aValue:Integer);
    procedure SetMaskedState(aValue:Boolean);
    procedure BuildInfoList(aValue:Integer);
    procedure CreatePattern(aValue:TBitmap; aInt:byte);

    procedure ReadStream(Stream:TStream);
    procedure WriteStream(Stream:TStream);
  protected
    function CheckImage(aValue:TBitmap):Boolean;
    procedure ConvertBmpToIML(aValue:TBitmap; Count:Integer; Masked:Boolean);
    procedure DefineProperties(Filer: TFiler);override;
    function  GetEmpty:Boolean;override;
    function  PrepareSpace:Integer;
    procedure ReadData(Stream:TStream);override;
    procedure WriteData(Stream:TStream);override;
    function  WriteFlag:Byte; override;
    {Properties, not made public until yet}
    property ShareImages:Boolean read FShareImages write FShareImages default false;
  public
    constructor Create(aOwner:TComponent);override;
    procedure Assign(Source:TPersistent);override;
    constructor CreateSize(AWidth, AHeight: Integer);
    destructor Destroy;override;

    {Resources}
    //function FileLoad(ResType: TResType; const Name:String; MaskColor: TColor): Boolean;
    //function GetResource(ResType: TResType; const Name:String; Width: Integer;
    //                     LoadFlags: TLoadResources; MaskColor: TColor): Boolean;
    //function ResourceLoad(ResType:TResType; const Name:String; MaskColor: TColor):Boolean;}

    {Create from Bitmap}
    function LoadFromBitmap(const FileName:string; Count:Integer; Masked:Boolean):Boolean;

    {direct access}
    procedure GetBitmap(Index:Integer; Image:TBitmap);
    procedure GetMaskBitmap(Index:Integer; MaskBmp:TBitmap);
    function GetImageBitmap:TBitmap;
    function GetImageMaskBitmap:TBitmap;
    function GetImageRect(Index:Integer):TRect;

    {imagelist functions}
    function Add(Image, Mask: TBitmap):Integer;
    function AddMasked(Image:TBitmap; MaskColor: TColor): Integer;
    procedure AddImages(aValue:TLMDImageListItem);
    procedure Clear;
    procedure Delete(Index: Integer);
    procedure Insert(Index:Integer; Image, Mask:TBitmap);
    procedure InsertImages(Index:Integer; aValue:TLMDImageListItem);
    procedure InsertMasked(Index:Integer; Image:TBitmap; MaskColor:TColor);
    procedure Move(OldIndex, NewIndex:Integer);
    procedure Replace(Index: Integer; Image, Mask: TBitmap);
    procedure ReplaceMasked(Index:Integer; Image: TBitmap; MaskColor: TColor);

    {i/o}
    procedure LoadFromFile(const Filename: string);
    procedure SaveToFile(const Filename: string);

    {Drawing}
    procedure Draw(Canvas: TCanvas; X, Y: Integer; Index: Integer);
    function DrawExt(Canvas:TCanvas; target:TRect; flags:Word; Index:Integer):TRect;

    {Extended Drawing}
    procedure ClipDraw(Canvas:TCanvas; target:TRect; flags:WORD;
                       pos:LongInt; transColor:TColor; index:Integer);

    {helper}
    function TransparentColor(Index:Integer):TColor;
    function GetColorAtPoint(aPoint: TPoint; Index:Integer): TColor;
    procedure FreeData; override;

    {properties, read only}
    property Count:Integer read GetCount;
    property Info:TList read FInfo;

    {properties for display}
    property BKColor:TColor read FBKColor write FBKColor default clNone;
    property BlendColor:TColor read FBlendColor write FBlendColor default clNone;
    property DrawingStyle: TLMDDrawingStyle read FDrawingStyle write FDrawingStyle default dsNormal;
    property ImageType:TLMDImageType read FImageType write FImageType default itImage;
    property PixelFormat:TLMDSavePixelFormat read FPixelFormat write FPixelFormat default spfDefault;
    property Compressed;
  published
    property AllocBy:Integer read FAllocBy write FAllocBy default 4;
    property Description;
    property Masked:Boolean read FMasked write SetMaskedState default false;
    property Height:Integer index 1 read FHeight write SetInteger default 16;
    property Width:Integer index 0 read FWidth write SetInteger default 16;
  end;

  {----------------------TLMDImageList-----------------------------------------}
  TLMDImageList = class(TLMDCustomImageList)
  private
    function GetList:TLMDImageListItem;
    function GetArrayItem(Index:Integer):TLMDImageListItem;
    function GetArrayNameItem(Index:String):TLMDImageListItem;
  protected
    procedure GetChildren(Proc: TGetChildProc; Root: TComponent); override;
    function GetChildOwner: TComponent; override;
  public
    procedure Assign(Source:TPersistent);override;
    constructor Create(aOwner:TComponent);override;
    destructor Destroy;override;

    {helpers for components}
    {general}
    function BmpCanvas(index:Integer):TCanvas;override; {3.10}
    function ItemRect(index, item:Integer):TRect;override; {3.10}
    function Dimensions(index:Integer; tp:Byte):Integer;override;
    procedure GetBitmapItem(index, item:Integer; tb:TBitmap); override;
    function IsValidItem(index, item:Integer):Boolean;override;
    function ItemCount(index:Integer):Integer;override;
    function Masked(index:Integer):Boolean; override;
    function Palette(index:Integer):HPalette;override;
    function TransparentColor(index, item:Integer):TColor;override;
    function GetColorAtPoint(aPoint: TPoint; index, item:Integer): TColor; override;
    {Drawing}
    procedure Draw(Canvas: TCanvas; X, Y: Integer; ListIndex, Index: Integer);override;
    function DrawExt(Canvas:TCanvas; target:TRect; flags:Word; ListIndex, Index:Integer):TRect;override;
    {Extended Drawing}
    procedure ClipDraw(Canvas:TCanvas; target:TRect; flags:WORD;
                       pos:LongInt; transColor:TColor; ListIndex, index:Integer);override;

    {properties}
    property Item:TLMDImageListItem read GetList;

    {Array-> Eigenschaft}
    property Items[Index:Integer]:TLMDImageListItem read GetArrayItem;default;
    property ItemByName[Index:String]:TLMDImageListItem read GetArrayNameItem;
  published
    property DefaultCompressed;
    property DefaultPixelFormat;
  end;

function LMDIMLGetItem(const FileName:String; index:Integer; aItem:TLMDImageListItem):Boolean;

implementation
